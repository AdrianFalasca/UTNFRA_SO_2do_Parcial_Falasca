<!DOCTYPE html>
<html lang="es">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Parcial</title>
    <style>
        #formContainer {
            display: none; /* Ocultar por defecto */
            width: 400px; /* Ancho fijo del formulario */
            margin: 50px auto; /* Centrar horizontalmente y añadir un margen superior */
            padding: 20px; /* Espaciado interno */
            border: 1px solid #ccc; /* Borde del formulario */
            border-radius: 5px; /* Bordes redondeados */
            background-color: #f9f9f9; /* Color de fondo del formulario */
        }
        #formDatos {
            max-width: 600px; /* Establecer un ancho máximo para el contenedor */
            margin: 0 auto; /* Centrar el contenedor */
            padding: 20px; /* Espaciado interno */
            border: 1px solid #ccc; /* Borde del contenedor */
            border-radius: 5px; /* Bordes redondeados */
            background-color: #f9f9f9; /* Color de fondo del contenedor */
        }
        table {
            border-collapse: collapse;
            width: 80%; /* Reducir el ancho de la tabla */
            margin: 20px auto; /* Centrar la tabla */
        }
        th, td {
            border: 1px solid #ccc;
            padding: 8px;
            text-align: left;
        }
        th {
            background-color: #f2f2f2;
            cursor: pointer; /* Cambiar cursor al pasar sobre encabezados */
        }
        .checkboxes {
            margin-bottom: 10px;
        }
        .form-group {
            margin-bottom: 10px; /* Espaciado entre campos del formulario */
        }
    </style>
</head>
<body>
    <div id="formDatos">
        <h1>Form Datos</h1>
        <label for="filtro">Filtrar por tipo:</label>
        <select id="filtro">
            <option value="todos">Todos</option>
            <option value="empleado">Empleados</option>
            <option value="cliente">Clientes</option>
        </select>
        <button type="button" id="btnCalcular">Calcular Edad Promedio</button>
        <p id="edadPromedio"></p>

        <div class="checkboxes">
            <label><input type="checkbox" id="checkbox-id" checked> ID</label>
            <label><input type="checkbox" id="checkbox-nombre" checked> Nombre</label>
            <label><input type="checkbox" id="checkbox-apellido" checked> Apellido</label>
            <label><input type="checkbox" id="checkbox-edad" checked> Edad</label>
            <label><input type="checkbox" id="checkbox-compras" checked> Compras</label>
            <label><input type="checkbox" id="checkbox-telefono" checked> Teléfono</label>
            <label><input type="checkbox" id="checkbox-sueldo" checked> Sueldo</label>
            <label><input type="checkbox" id="checkbox-ventas" checked> Ventas</label>
        </div>

        <table id="tablaDatos">
            <thead>
                <tr>
                    <th data-col="id">ID</th>
                    <th data-col="nombre">Nombre</th>
                    <th data-col="apellido">Apellido</th>
                    <th data-col="edad">Edad</th>
                    <th data-col="compras">Compras</th>
                    <th data-col="telefono">Teléfono</th>
                    <th data-col="sueldo">Sueldo</th>
                    <th data-col="ventas">Ventas</th>
                </tr>
            </thead>
            <tbody></tbody>
        </table>
        <button type="button" id="btnAgregar">Agregar</button>
    </div>

    <div id="formContainer">
        <h1>Formulario ABM</h1>
        <form id="personaForm">
            <div class="form-group">
                <label for="id">ID:</label>
                <input type="number" id="id" disabled>
            </div>
            <div class="form-group">
                <label for="atributo1">Nombre:</label>
                <input type="text" id="atributo1" required>
            </div>
            <div class="form-group">
                <label for="atributo2">Apellido:</label>
                <input type="text" id="atributo2" required>
            </div>
            <div class="form-group">
                <label for="edad">Edad:</label>
                <input type="number" id="edad" required>
            </div>
            <div class="form-group">
                <label for="tipo">Tipo:</label>
                <select id="tipo">
                    <option value="empleado">Empleado</option>
                    <option value="cliente">Cliente</option>
                </select>
            </div>
            <div class="form-group">
                <label for="atributo3">Sueldo / Compras:</label>
                <input type="number" id="atributo3" required>
            </div>
            <button type="submit" id="btnGuardar">Guardar</button>
            <button type="button" id="cancelar">Cancelar</button>
            <button type="button" id="btnEliminar" style="display: none;">Eliminar</button> <!-- Ocultar inicialmente -->
        </form>
    </div>

    <script>
        class Persona {
    constructor(id, nombre, apellido, edad) {
        this.id = id;
        this.nombre = nombre;
        this.apellido = apellido;
        this.edad = edad;
    }

    toString() {
        return `ID: ${this.id}, Nombre: ${this.nombre}, Apellido: ${this.apellido}, Edad: ${this.edad}`;
    }

    toJson() {
        return JSON.stringify({
            id: this.id,
            nombre: this.nombre,
            apellido: this.apellido,
            edad: this.edad
        });
    }
}

class Empleado extends Persona {
    constructor(id, nombre, apellido, edad, sueldo, ventas) {
        super(id, nombre, apellido, edad);
        this.sueldo = sueldo;
        this.ventas = ventas;
    }

    toString() {
        return `${super.toString()}, Sueldo: ${this.sueldo}, Ventas: ${this.ventas}`;
    }

    toJson() {
        return JSON.stringify({
            ...JSON.parse(super.toJson()),
            sueldo: this.sueldo,
            ventas: this.ventas
        });
    }
}

class Cliente extends Persona {
    constructor(id, nombre, apellido, edad, compras, telefono) {
        super(id, nombre, apellido, edad);
        this.compras = compras;
        this.telefono = telefono;
    }

    toString() {
        return `${super.toString()}, Compras: ${this.compras}, Teléfono: ${this.telefono}`;
    }

    toJson() {
        return JSON.stringify({
            ...JSON.parse(super.toJson()),
            compras: this.compras,
            telefono: this.telefono
        });
    }
}


        const jsonData = '[{"id":1, "nombre":"Juan", "apellido":"Pérez", "edad":25, "sueldo":3000, "ventas":1500},{"id":2, "nombre":"María", "apellido":"López", "edad":30, "sueldo":4000, "ventas":2500},{"id":3, "nombre":"Luis", "apellido":"Martínez", "edad":27, "sueldo":3500, "ventas":2000},{"id":4, "nombre":"Fernando", "apellido":"Nieto", "edad":18, "compras":8000, "telefono":"152111131"},{"id":5, "nombre":"Manuel", "apellido":"Loza", "edad":20,"compras":50000, "telefono":"42040077"},{"id":666, "nombre":"Nicolas", "apellido":"Serrano", "edad":23,"compras":7000, "telefono":"1813181563"}]';

        let personas = JSON.parse(jsonData).map(item => {
            if (item.ventas !== undefined && item.sueldo !== undefined) {
                return new Empleado(item.id, item.nombre, item.apellido, item.edad, item.sueldo, item.ventas);
            } else {
                return new Cliente(item.id, item.nombre, item.apellido, item.edad, item.compras, item.telefono);
            }
        });

        const mostrarDatos = (tipoFiltro = 'todos') => {
            const tbody = document.querySelector('#tablaDatos tbody');
            tbody.innerHTML = '';

            personas.forEach(persona => {
                if (tipoFiltro === 'todos' || (tipoFiltro === 'empleado' && persona instanceof Empleado) || (tipoFiltro === 'cliente' && persona instanceof Cliente)) {
                    const nuevaFila = `
                        <tr>
                            <td class="col-id">${persona.id}</td>
                            <td class="col-nombre">${persona.nombre}</td>
                            <td class="col-apellido">${persona.apellido}</td>
                            <td class="col-edad">${persona.edad}</td>
                            <td class="col-compras">${persona instanceof Cliente ? persona.compras : ''}</td>
                            <td class="col-telefono">${persona instanceof Cliente ? persona.telefono : ''}</td>
                            <td class="col-sueldo">${persona instanceof Empleado ? persona.sueldo : ''}</td>
                            <td class="col-ventas">${persona instanceof Empleado ? persona.ventas : ''}</td>
                        </tr>`;
                    tbody.insertAdjacentHTML('beforeend', nuevaFila);
                }
            });
        };

        mostrarDatos();

        document.getElementById('filtro').addEventListener('change', (event) => {
            mostrarDatos(event.target.value);
        });

        // Mostrar el formulario ABM al hacer clic en "Agregar Persona"
        document.getElementById('btnAgregar').addEventListener('click', () => {
            document.getElementById('formContainer').style.display = 'block';
            document.getElementById('formDatos').style.display = 'none'; // Ocultar formulario de datos
            document.getElementById('personaForm').reset();
            document.getElementById('btnEliminar').style.display = 'none'; // Ocultar botón Eliminar
        });

        // Al hacer clic en una fila de la tabla, mostrar el formulario ABM con los datos
        document.querySelector('#tablaDatos tbody').addEventListener('dblclick', (event) => {
            const fila = event.target.closest('tr');
            if (!fila) return;

            const columnas = fila.children;
            document.getElementById('id').value = columnas[0].textContent;
            document.getElementById('atributo1').value = columnas[1].textContent;
            document.getElementById('atributo2').value = columnas[2].textContent;
            document.getElementById('edad').value = columnas[3].textContent;
            document.getElementById('atributo3').value = (columnas[4].textContent || columnas[5].textContent || columnas[6].textContent || columnas[7].textContent);
            document.getElementById('tipo').value = columnas[4].textContent ? 'cliente' : 'empleado'; // Determinar el tipo
            document.getElementById('formContainer').style.display = 'block';
            document.getElementById('formDatos').style.display = 'none'; // Ocultar formulario de datos
            document.getElementById('btnEliminar').style.display = 'block'; // Mostrar botón Eliminar
        });

        // Cancelar y ocultar el formulario ABM
        document.getElementById('cancelar').addEventListener('click', () => {
            document.getElementById('formContainer').style.display = 'none';
            document.getElementById('formDatos').style.display = 'block'; // Mostrar formulario de datos
        });

        
        document.getElementById('personaForm').addEventListener('submit', (event) => {
    event.preventDefault();

    const id = document.getElementById('id').value;
    const nombre = document.getElementById('atributo1').value;
    const apellido = document.getElementById('atributo2').value;
    const edad = parseInt(document.getElementById('edad').value, 10);
    const tipo = document.getElementById('tipo').value;
    const atributo3 = parseFloat(document.getElementById('atributo3').value);
    const telefono = tipo === 'cliente' ? document.getElementById('atributo4').value : ''; // Obtener teléfono solo si es cliente

    // Validaciones
    if (nombre.trim() === '' || apellido.trim() === '') {
        alert('El nombre y el apellido no pueden estar vacíos.');
        return;
    }
    if (!Number.isInteger(edad) || edad <= 15) {
        alert('La edad debe ser un número entero mayor a 15.');
        return;
    }

    // Validaciones según tipo
    if (tipo === 'empleado') {
        if (isNaN(atributo3) || atributo3 <= 0) {
            alert('El sueldo debe ser un número mayor a 0.');
            return;
        }
    } else {
        if (isNaN(atributo3) || atributo3 <= 0 || telefono.trim() === '') {
            alert('Las compras deben ser un número mayor a 0 y el teléfono no puede estar vacío.');
            return;
        }
    }

    // Guardar o editar
    if (id) {
        const persona = personas.find(p => p.id == id);
        if (persona) {
            persona.nombre = nombre;
            persona.apellido = apellido;
            persona.edad = edad;
            if (tipo === 'empleado') {
                persona.sueldo = atributo3;
                persona.ventas = parseFloat(document.getElementById('ventas').value); // Actualizar ventas
            } else {
                persona.compras = atributo3;
                persona.telefono = telefono; // Actualizar teléfono
            }
        }
    } else {
        const nuevoId = personas.length > 0 ? Math.max(...personas.map(p => p.id)) + 1 : 1;
        if (tipo === 'empleado') {
            personas.push(new Empleado(nuevoId, nombre, apellido, edad, atributo3, 0));
        } else {
            personas.push(new Cliente(nuevoId, nombre, apellido, edad, atributo3, telefono));
        }
    }

    mostrarDatos(); // Actualizar la tabla
    document.getElementById('formContainer').style.display = 'none'; // Ocultar formulario ABM
    document.getElementById('formDatos').style.display = 'block'; // Mostrar formulario de datos
});







            // Eliminar persona
    document.getElementById('btnEliminar').addEventListener('click', () => {
        const id = document.getElementById('id').value;
        personas = personas.filter(p => p.id != id);
        mostrarDatos(); // Actualizar la tabla
        document.getElementById('formContainer').style.display = 'none'; // Ocultar formulario ABM
        document.getElementById('formDatos').style.display = 'block'; // Mostrar formulario de datos
    });

    // Función para calcular y mostrar el promedio de edad
    const calcularPromedioEdad = (tipoFiltro) => {
        let personasFiltradas = personas.filter(persona => {
            return tipoFiltro === 'todos' ||
                (tipoFiltro === 'empleado' && persona instanceof Empleado) ||
                (tipoFiltro === 'cliente' && persona instanceof Cliente);
        });

        if (personasFiltradas.length === 0) {
            document.getElementById('edadPromedio').textContent = 'No hay personas para calcular el promedio.';
            return;
        }

        // Verificar que la edad sea un número válido antes de sumarla
        let totalEdades = personasFiltradas.reduce((acc, persona) => {
            let edadNumerica = parseInt(persona.edad, 10);
            return acc + (isNaN(edadNumerica) ? 0 : edadNumerica); // Si la edad no es un número, se suma 0
        }, 0);

        let promedio = totalEdades / personasFiltradas.length;

        // Mostrar el promedio con dos decimales
        document.getElementById('edadPromedio').textContent = `Promedio de edad: ${promedio.toFixed(2)}`;
    };

        // Agregar el listener al botón para calcular el promedio
        document.getElementById('btnCalcular').addEventListener('click', () => {
            const tipoFiltro = document.getElementById('filtro').value;
            calcularPromedioEdad(tipoFiltro);
        });

            const gestionarColumnas = () => {
        const checkboxes = document.querySelectorAll('.checkboxes input[type="checkbox"]');
        
        checkboxes.forEach(checkbox => {
            const columnClass = `.col-${checkbox.id.split('-')[1]}`; // Obtener la clase correspondiente a la columna
            const columnas = document.querySelectorAll(columnClass); // Seleccionar todas las celdas de esa columna
            const th = document.querySelector(`th[data-col="${checkbox.id.split('-')[1]}"]`); // Seleccionar el encabezado

            if (checkbox.checked) {
                columnas.forEach(col => col.style.display = 'table-cell'); // Mostrar celdas de datos
                if (th) th.style.display = 'table-cell'; // Mostrar encabezado
            } else {
                columnas.forEach(col => col.style.display = 'none'); // Ocultar celdas de datos
                if (th) th.style.display = 'none'; // Ocultar encabezado
            }
        });
    };

    // Ejecutar la función cada vez que se cambia el estado de un checkbox
    document.querySelectorAll('.checkboxes input[type="checkbox"]').forEach(checkbox => {
        checkbox.addEventListener('change', gestionarColumnas);
    });

    // Llamar a la función inicialmente para aplicar la visibilidad correcta de las columnas
    gestionarColumnas();

// Agregar listener a los encabezados de las columnas para ordenar al hacer clic
document.querySelectorAll('#tablaDatos th').forEach(th => {
    th.addEventListener('click', () => {
        const column = th.getAttribute('data-col');
        const sortOrder = th.dataset.order = -(th.dataset.order || -1);
        
        personas.sort((a, b) => {
            let valueA = a[column];
            let valueB = b[column];
            
            if (valueA === undefined) valueA = '';
            if (valueB === undefined) valueB = '';
            
            if (typeof valueA === 'string') {
                valueA = valueA.toUpperCase();
                valueB = valueB.toUpperCase();
            }
            
            if (valueA < valueB) return -sortOrder;
            if (valueA > valueB) return sortOrder;
            
            return 0;
        });
        
        mostrarDatos(document.getElementById('filtro').value);
    });
});






        
    </script>
</body>
</html>
